// Script ƒë·ªÉ m√¥ ph·ªèng vi·ªác qu·∫πt th·∫ª v·ªõi ESP32 ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t
const { initializeApp } = require('firebase/app');
const { getDatabase, ref, set, get } = require('firebase/database');

// C·∫•u h√¨nh Firebase
const firebaseConfig = {
  apiKey: "AIzaSyAxAR_UUEaXdJl7SMo8vhbPcDcLvvGSM0w",
  authDomain: "doantotnghiep-ae0f8.firebaseapp.com",
  databaseURL: "https://doantotnghiep-ae0f8-default-rtdb.asia-southeast1.firebasedatabase.app",
  projectId: "doantotnghiep-ae0f8",
  storageBucket: "doantotnghiep-ae0f8.appspot.com",
  messagingSenderId: "701901349885",
  appId: "1:701901349885:web:ccb77f635d55f6bdb6af94"
};

// Kh·ªüi t·∫°o Firebase
const app = initializeApp(firebaseConfig);
const db = getDatabase(app);

// H√†m l·∫•y ng√†y hi·ªán t·∫°i theo ƒë·ªãnh d·∫°ng YYYYMMDD (gi·ªëng ESP32)
function getCurrentDateString() {
  // S·ª≠ d·ª•ng ng√†y c·ªë ƒë·ªãnh ƒë·ªÉ ƒë·∫£m b·∫£o t√≠nh nh·∫•t qu√°n v·ªõi ESP32
  return "20240510"; // Tr·∫£ v·ªÅ ƒë·ªãnh d·∫°ng YYYYMMDD
}

// H√†m m√¥ ph·ªèng vi·ªác qu·∫πt th·∫ª
async function simulateCardSwipe(cardId, isCheckOut = false) {
  try {
    // L·∫•y ng√†y hi·ªán t·∫°i theo ƒë·ªãnh d·∫°ng YYYYMMDD (gi·ªëng ESP32)
    const date = getCurrentDateString();
    console.log(`Ng√†y hi·ªán t·∫°i (ESP32): ${date}`);

    // L·∫•y th√¥ng tin sinh vi√™n
    const studentRef = ref(db, `students/${cardId}`);
    const studentSnapshot = await get(studentRef);

    let studentName = "Unknown";
    if (studentSnapshot.exists()) {
      studentName = studentSnapshot.val().name;
    }

    console.log(`Th√¥ng tin sinh vi√™n: ${studentName} (${cardId})`);

    // Ki·ªÉm tra xem sinh vi√™n ƒë√£ ƒëi·ªÉm danh v√†o ch∆∞a
    const attendancePath = `attendance/${date}/${cardId}`;
    const attendanceRef = ref(db, attendancePath);
    const attendanceSnapshot = await get(attendanceRef);

    const currentTime = Date.now();
    let attendanceData = {};

    if (isCheckOut) {
      // N·∫øu l√† ƒëi·ªÉm danh ra
      if (attendanceSnapshot.exists() && attendanceSnapshot.val().in) {
        // Ch·ªâ c·∫≠p nh·∫≠t gi·ªù ra n·∫øu ƒë√£ c√≥ gi·ªù v√†o
        attendanceData = {
          ...attendanceSnapshot.val(),
          out: currentTime,
          status: "present"
        };
        console.log(`üìù ƒêi·ªÉm danh ra cho sinh vi√™n ${studentName}`);
      } else {
        // N·∫øu ch∆∞a ƒëi·ªÉm danh v√†o, t·∫°o c·∫£ gi·ªù v√†o v√† gi·ªù ra
        attendanceData = {
          in: currentTime,
          out: currentTime,
          status: "present"
        };
        console.log(`üìù T·∫°o c·∫£ ƒëi·ªÉm danh v√†o v√† ra cho sinh vi√™n ${studentName}`);
      }
    } else {
      // N·∫øu l√† ƒëi·ªÉm danh v√†o
      if (!attendanceSnapshot.exists() || !attendanceSnapshot.val().in) {
        // Ch·ªâ t·∫°o ƒëi·ªÉm danh v√†o n·∫øu ch∆∞a c√≥
        attendanceData = {
          in: currentTime,
          status: "present"
        };
        console.log(`üìù ƒêi·ªÉm danh v√†o cho sinh vi√™n ${studentName}`);
      } else {
        console.log(`‚ö†Ô∏è Sinh vi√™n ${studentName} ƒë√£ ƒëi·ªÉm danh v√†o r·ªìi`);
        return;
      }
    }

    // C·∫≠p nh·∫≠t d·ªØ li·ªáu ƒëi·ªÉm danh
    await set(ref(db, attendancePath), attendanceData);
    console.log(`‚úÖ C·∫≠p nh·∫≠t ƒëi·ªÉm danh th√†nh c√¥ng cho sinh vi√™n ${studentName}`);

    // Ki·ªÉm tra l·∫°i d·ªØ li·ªáu sau khi c·∫≠p nh·∫≠t
    const updatedSnapshot = await get(attendanceRef);
    console.log(`D·ªØ li·ªáu sau khi c·∫≠p nh·∫≠t:`, updatedSnapshot.val());

  } catch (error) {
    console.error('‚ùå L·ªói khi m√¥ ph·ªèng qu·∫πt th·∫ª:', error);
  }
}

// X·ª≠ l√Ω tham s·ªë d√≤ng l·ªánh
const args = process.argv.slice(2);
const command = args[0] || 'checkin';
const cardId = args[1] || 'DDEF412'; // M·∫∑c ƒë·ªãnh s·ª≠ d·ª•ng th·∫ª DDEF412

if (command === 'checkin') {
  simulateCardSwipe(cardId, false).then(() => process.exit(0));
} else if (command === 'checkout') {
  simulateCardSwipe(cardId, true).then(() => process.exit(0));
} else {
  console.error('L·ªánh kh√¥ng h·ª£p l·ªá. S·ª≠ d·ª•ng: node simulate-esp32-swipe.js [checkin|checkout] [cardId]');
  process.exit(1);
}
