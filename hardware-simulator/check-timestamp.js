// Script ƒë·ªÉ ki·ªÉm tra timestamp
const { initializeApp } = require('firebase/app');
const { getDatabase, ref, set, get } = require('firebase/database');

// C·∫•u h√¨nh Firebase
const firebaseConfig = {
  apiKey: "AIzaSyAxAR_UUEaXdJl7SMo8vhbPcDcLvvGSM0w",
  authDomain: "doantotnghiep-ae0f8.firebaseapp.com",
  databaseURL: "https://doantotnghiep-ae0f8-default-rtdb.asia-southeast1.firebasedatabase.app",
  projectId: "doantotnghiep-ae0f8",
  storageBucket: "doantotnghiep-ae0f8.appspot.com",
  messagingSenderId: "701901349885",
  appId: "1:701901349885:web:ccb77f635d55f6bdb6af94"
};

// Kh·ªüi t·∫°o Firebase
const app = initializeApp(firebaseConfig);
const db = getDatabase(app);

// H√†m ki·ªÉm tra timestamp
async function checkTimestamp() {
  try {
    // L·∫•y th·ªùi gian hi·ªán t·∫°i
    const now = Date.now();
    const currentDate = new Date();
    
    console.log('Th·ªùi gian hi·ªán t·∫°i:');
    console.log(`- JavaScript timestamp (milliseconds): ${now}`);
    console.log(`- Unix timestamp (seconds): ${Math.floor(now / 1000)}`);
    console.log(`- Ng√†y gi·ªù: ${currentDate.toLocaleString()}`);
    console.log(`- ISO: ${currentDate.toISOString()}`);
    console.log(`- UTC: ${currentDate.toUTCString()}`);
    
    // T·∫°o timestamp test tr√™n Firebase
    const testTimestamp = Math.floor(now / 1000); // Chuy·ªÉn ƒë·ªïi sang gi√¢y (Unix timestamp)
    await set(ref(db, 'test/timestamp'), testTimestamp);
    console.log(`\nƒê√£ l∆∞u timestamp test l√™n Firebase: ${testTimestamp}`);
    
    // ƒê·ªçc l·∫°i timestamp t·ª´ Firebase
    const timestampRef = ref(db, 'test/timestamp');
    const snapshot = await get(timestampRef);
    
    if (snapshot.exists()) {
      const firebaseTimestamp = snapshot.val();
      console.log(`ƒê·ªçc l·∫°i timestamp t·ª´ Firebase: ${firebaseTimestamp}`);
      
      // Chuy·ªÉn ƒë·ªïi timestamp th√†nh ng√†y gi·ªù
      const firebaseDate = new Date(firebaseTimestamp * 1000); // Nh√¢n v·ªõi 1000 v√¨ Firebase l∆∞u timestamp d∆∞·ªõi d·∫°ng gi√¢y
      console.log(`Ng√†y gi·ªù t·ª´ Firebase: ${firebaseDate.toLocaleString()}`);
      
      // So s√°nh v·ªõi timestamp hi·ªán t·∫°i
      const diff = Math.abs(testTimestamp - firebaseTimestamp);
      console.log(`Ch√™nh l·ªách: ${diff} gi√¢y`);
      
      if (diff === 0) {
        console.log('‚úÖ Timestamp kh·ªõp v·ªõi gi√° tr·ªã ƒë√£ l∆∞u');
      } else {
        console.log('‚ùå Timestamp kh√¥ng kh·ªõp v·ªõi gi√° tr·ªã ƒë√£ l∆∞u');
      }
    } else {
      console.log('Kh√¥ng t√¨m th·∫•y timestamp trong Firebase');
    }
    
    // Ki·ªÉm tra timestamp trong d·ªØ li·ªáu ƒëi·ªÉm danh
    console.log('\nKi·ªÉm tra timestamp trong d·ªØ li·ªáu ƒëi·ªÉm danh:');
    const attendanceRef = ref(db, 'attendance');
    const attendanceSnapshot = await get(attendanceRef);
    
    if (attendanceSnapshot.exists()) {
      const attendanceData = attendanceSnapshot.val();
      const dates = Object.keys(attendanceData);
      
      for (const date of dates) {
        console.log(`\nNg√†y ${date}:`);
        const students = Object.keys(attendanceData[date]);
        
        for (const studentId of students) {
          const data = attendanceData[date][studentId];
          console.log(`  Sinh vi√™n ${studentId}:`);
          
          if (data.in) {
            const inDate = new Date(data.in * 1000);
            console.log(`    - Th·ªùi gian v√†o: ${inDate.toLocaleString()} (timestamp: ${data.in})`);
            
            // Ki·ªÉm tra t√≠nh h·ª£p l·ªá c·ªßa timestamp
            if (data.in < 1577836800) { // 1/1/2020 00:00:00 GMT
              console.log('      ‚ö†Ô∏è Timestamp v√†o kh√¥ng h·ª£p l·ªá (tr∆∞·ªõc nƒÉm 2020)');
            }
            
            // Ki·ªÉm tra xem timestamp c√≥ ph·∫£i l√† timestamp Unix kh√¥ng
            const year = inDate.getFullYear();
            if (year < 2020 || year > 2030) {
              console.log('      ‚ö†Ô∏è NƒÉm kh√¥ng h·ª£p l·ªá, c√≥ th·ªÉ timestamp kh√¥ng ph·∫£i l√† Unix timestamp');
              
              // Th·ª≠ chuy·ªÉn ƒë·ªïi timestamp t·ª´ milliseconds sang seconds
              const correctedDate = new Date(data.in);
              console.log(`      üîÑ Th·ª≠ chuy·ªÉn ƒë·ªïi: ${correctedDate.toLocaleString()}`);
            }
          }
          
          if (data.out) {
            const outDate = new Date(data.out * 1000);
            console.log(`    - Th·ªùi gian ra: ${outDate.toLocaleString()} (timestamp: ${data.out})`);
            
            // Ki·ªÉm tra t√≠nh h·ª£p l·ªá c·ªßa timestamp
            if (data.out < 1577836800) { // 1/1/2020 00:00:00 GMT
              console.log('      ‚ö†Ô∏è Timestamp ra kh√¥ng h·ª£p l·ªá (tr∆∞·ªõc nƒÉm 2020)');
            }
          }
        }
      }
    } else {
      console.log('Kh√¥ng c√≥ d·ªØ li·ªáu ƒëi·ªÉm danh');
    }
  } catch (error) {
    console.error('L·ªói khi ki·ªÉm tra timestamp:', error);
  }
}

// H√†m ch√≠nh
async function main() {
  try {
    await checkTimestamp();
    process.exit(0);
  } catch (error) {
    console.error('L·ªói:', error);
    process.exit(1);
  }
}

// Th·ª±c thi h√†m ch√≠nh
main();
